// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  PATIENT
  DOCTOR
  ADMIN
}

enum AppointmentStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum TimeSlotStatus {
  AVAILABLE
  BOOKED
  CANCELLED
}

model User {
  id             String   @id @default(uuid())
  name           String
  email          String   @unique
  profilePicture String?
  password       String
  role           Role     @default(PATIENT)
  refreshToken   String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Role-specific relations
  patient          Patient?      @relation("PatientUser")
  doctor           Doctor?       @relation("DoctorUser")
  admin            Admin?        @relation("AdminUser")
  sentMessages     ChatMessage[] @relation("SentMessages")
  receivedMessages ChatMessage[] @relation("ReceivedMessages")
}

model Patient {
  id             String           @id @default(uuid())
  userId         String           @unique
  medicalHistory String?
  symptoms       Symptom[]
  appointments   Appointment[]    @relation("PatientAppointments")
  prescriptions  Prescription[]
  PatientHistory PatientHistory[]

  user User @relation("PatientUser", fields: [userId], references: [id])
}

model Doctor {
  id             String           @id @default(uuid())
  userId         String           @unique
  specialty      String
  clinicLocation String
  experience     String?          @default("0")
  education      String?
  bio            String?
  languages      String[]
  appointments   Appointment[]    @relation("DoctorAppointments")
  prescriptions  Prescription[]
  patientHistory PatientHistory[]
  timeSlots      TimeSlot[]

  user User @relation("DoctorUser", fields: [userId], references: [id])
}

model Admin {
  id          String @id @default(uuid())
  userId      String @unique
  // Define any admin-specific attributes here, e.g., permissions JSON
  permissions Json?

  user User @relation("AdminUser", fields: [userId], references: [id])
}

model Appointment {
  id              String            @id @default(uuid())
  patientId       String
  doctorId        String
  timeSlotId      String
  status          AppointmentStatus @default(PENDING)
  consultationFee Int?             @default(0)
  notes           String?

  patient  Patient  @relation("PatientAppointments", fields: [patientId], references: [id])
  doctor   Doctor   @relation("DoctorAppointments", fields: [doctorId], references: [id])
  timeSlot TimeSlot @relation(fields: [timeSlotId], references: [id])

  patientHistory PatientHistory? // <- only declare the field here, no `@relation`
}

model Prescription {
  id               String   @id @default(uuid())
  doctorId         String
  patientId        String
  dateIssued       DateTime @default(now())
  prescriptionText String

  doctor         Doctor          @relation(fields: [doctorId], references: [id])
  patient        Patient         @relation(fields: [patientId], references: [id])
  patientHistory PatientHistory?
}

model Symptom {
  id          String @id @default(uuid())
  symptomText String
  patientId   String

  patient Patient @relation(fields: [patientId], references: [id])
}

model PatientHistory {
  id             String   @id @default(uuid())
  doctorId       String
  patientId      String
  appointmentId  String   @unique
  prescriptionId String   @unique
  notes          String
  dateRecorded   DateTime @default(now())

  doctor       Doctor       @relation(fields: [doctorId], references: [id])
  patient      Patient      @relation(fields: [patientId], references: [id])
  appointment  Appointment  @relation(fields: [appointmentId], references: [id])
  prescription Prescription @relation(fields: [prescriptionId], references: [id])
}

model TimeSlot {
  id        String         @id @default(uuid())
  doctorId  String
  startTime DateTime
  endTime   DateTime
  consultationFee Int?             @default(0)
  status    TimeSlotStatus @default(AVAILABLE)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  // Relations
  doctor      Doctor        @relation(fields: [doctorId], references: [id])
  appointment Appointment[]

  @@unique([doctorId, startTime])
  @@index([doctorId, startTime])
}

model ChatMessage {
  id          String   @id @default(uuid())
  senderId    String
  receiverId  String? // Optional for room messages
  room        String // Can be city name (for group) or generated ID (for 1-1)
  message     String
  messageType String   @default("TEXT") // TEXT or IMAGE
  imageUrl    String? // URL for image messages
  timestamp   DateTime @default(now())

  sender   User  @relation("SentMessages", fields: [senderId], references: [id])
  receiver User? @relation("ReceivedMessages", fields: [receiverId], references: [id])
}
