// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  PATIENT
  DOCTOR
  ADMIN
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  REJECTED
}

enum AppointmentType {
  ONLINE
  OFFLINE
}

enum TimeSlotStatus {
  AVAILABLE
  BOOKED
  CANCELLED
}

model User {
  id             String   @id @default(uuid())
  name           String
  email          String   @unique
  profilePicture String?
  password       String
  role           Role     @default(PATIENT)
  refreshToken   String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Role-specific relations
  patient          Patient?       @relation("PatientUser")
  doctor           Doctor?        @relation("DoctorUser")
  admin            Admin?         @relation("AdminUser")
  sentMessages     ChatMessage[]  @relation("SentMessages")
  receivedMessages ChatMessage[]  @relation("ReceivedMessages")
  rooms            Room[]         @relation("RoomMembers")
  adminRooms       Room[]         @relation("RoomAdmin")
  aiChats          AiChat[]       @relation("UserAiChats")
  notifications    Notification[] @relation("UserNotifications")
  roomId           String?
}

model Patient {
  id             String           @id @default(uuid())
  userId         String           @unique
  location       String? // City/State/Country for patients
  medicalHistory String?
  symptoms       Symptom[]
  appointments   Appointment[]    @relation("PatientAppointments")
  prescriptions  Prescription[]
  PatientHistory PatientHistory[]
  reports        Report[]

  user User @relation("PatientUser", fields: [userId], references: [id])
}

model Doctor {
  id             String           @id @default(uuid())
  userId         String           @unique
  specialty      String
  clinicLocation String
  experience     String?          @default("0")
  education      String?
  bio            String?
  languages      String[]
  appointments   Appointment[]    @relation("DoctorAppointments")
  prescriptions  Prescription[]
  patientHistory PatientHistory[]
  timeSlots      TimeSlot[]

  user User @relation("DoctorUser", fields: [userId], references: [id])
}

model Admin {
  id          String @id @default(uuid())
  userId      String @unique
  // Define any admin-specific attributes here, e.g., permissions JSON
  permissions Json?

  user User @relation("AdminUser", fields: [userId], references: [id])
}

model Appointment {
  id              String            @id @default(uuid())
  patientId       String
  doctorId        String
  timeSlotId      String? // Made optional for direct booking
  date            DateTime // YYYY-MM-DD format
  time            String // HH:mm format
  appointmentType AppointmentType   @default(OFFLINE)
  status          AppointmentStatus @default(PENDING)
  consultationFee Int?              @default(0)
  notes           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  // Link created prescription to this appointment (optional)
  prescriptionId  String?

  patient      Patient       @relation("PatientAppointments", fields: [patientId], references: [id])
  doctor       Doctor        @relation("DoctorAppointments", fields: [doctorId], references: [id])
  timeSlot     TimeSlot?     @relation(fields: [timeSlotId], references: [id])
  prescription Prescription? @relation(fields: [prescriptionId], references: [id])

  patientHistory PatientHistory? // <- only declare the field here, no `@relation`
  notifications  Notification[]  @relation("AppointmentNotifications")

  @@index([doctorId, date, time])
  @@index([patientId, date])
  @@index([prescriptionId])
}

model Prescription {
  id               String   @id @default(uuid())
  doctorId         String
  patientId        String
  dateIssued       DateTime @default(now())
  prescriptionText String

  doctor         Doctor          @relation(fields: [doctorId], references: [id])
  patient        Patient         @relation(fields: [patientId], references: [id])
  patientHistory PatientHistory?
  Appointment    Appointment[]
}

model Symptom {
  id          String @id @default(uuid())
  symptomText String
  patientId   String

  patient Patient @relation(fields: [patientId], references: [id])
}

model PatientHistory {
  id             String   @id @default(uuid())
  doctorId       String
  patientId      String
  appointmentId  String   @unique
  prescriptionId String   @unique
  notes          String
  dateRecorded   DateTime @default(now())

  doctor       Doctor       @relation(fields: [doctorId], references: [id])
  patient      Patient      @relation(fields: [patientId], references: [id])
  appointment  Appointment  @relation(fields: [appointmentId], references: [id])
  prescription Prescription @relation(fields: [prescriptionId], references: [id])
}

model TimeSlot {
  id              String         @id @default(uuid())
  doctorId        String
  startTime       DateTime
  endTime         DateTime
  consultationFee Int?           @default(0)
  status          TimeSlotStatus @default(AVAILABLE)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relations
  doctor      Doctor        @relation(fields: [doctorId], references: [id])
  appointment Appointment[] // Optional relationship for backward compatibility

  @@unique([doctorId, startTime])
  @@index([doctorId, startTime])
}

model ChatMessage {
  id          String   @id @default(uuid())
  senderId    String
  receiverId  String? // Optional for room messages
  roomId      String?
  message     String
  messageType String   @default("TEXT") // TEXT or IMAGE
  imageUrl    String? // URL for image messages
  timestamp   DateTime @default(now())

  sender   User  @relation("SentMessages", fields: [senderId], references: [id])
  receiver User? @relation("ReceivedMessages", fields: [receiverId], references: [id])
  room     Room? @relation("RoomMessages", fields: [roomId], references: [id])

  @@index([senderId, receiverId, timestamp])
  @@index([roomId, timestamp])
}

model Room {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  admin     User[]   @relation("RoomAdmin")

  members  User[]        @relation("RoomMembers")
  messages ChatMessage[] @relation("RoomMessages")

  @@index([name])
}

model Report {
  id                 String   @id @default(uuid())
  patientId          String
  filename           String
  fileUrl            String
  extractedText      String?
  summary            String?
  abnormalValues     Json? // Store as JSON for flexibility
  possibleConditions String[] // Array of possible conditions
  recommendation     String?
  disclaimer         String?
  mimeType           String
  fileSize           Int // in bytes
  status             String   @default("PENDING") // PENDING, PROCESSING, COMPLETED, FAILED
  error              String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  patient Patient @relation(fields: [patientId], references: [id])

  @@index([patientId])
  @@index([status])
  @@index([createdAt])
}

model AiChat {
  id             String   @id @default(uuid())
  userId         String
  userMessage    String
  aiResponse     Json // Stores the complete JSON response from Gemini
  probableCauses String[] // Extracted from AI response for easier querying
  severity       String // mild, moderate, severe
  recommendation String // Extracted recommendation
  disclaimer     String // Extracted disclaimer
  createdAt      DateTime @default(now())

  user User @relation("UserAiChats", fields: [userId], references: [id])

  @@index([userId, createdAt])
}

model Notification {
  id            String   @id @default(uuid())
  userId        String
  type          String // APPOINTMENT_ACCEPTED, APPOINTMENT_REJECTED, APPOINTMENT_REMINDER
  title         String
  message       String
  isRead        Boolean  @default(false)
  appointmentId String? // Optional reference to appointment
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user        User         @relation("UserNotifications", fields: [userId], references: [id])
  appointment Appointment? @relation("AppointmentNotifications", fields: [appointmentId], references: [id])

  @@index([userId, isRead])
  @@index([createdAt])
}
